setuppasswordlessssh() {
    hostname=$(scutil --get ComputerName)
    echo "Enter the details to setup passwordless ssh"
    echo "Enter username of your remote machine"
    read username
    echo "Enter remote machine name (not the address). Ex: hydrogen, helium, etc."
    read machinename
    ssh-keygen -o -a 100 -t ed25519 -f ~/.ssh/id_ed_${machinename} -C "${USER}@${hostname}" -q -N ''
    echo "Enter ${machinename}'s address. Ex: mercury.local, krypton.guest.corp.microsoft.com, etc."
    read machineaddress
    cat ~/.ssh/id_ed_${machinename}.pub | ssh ${username}@${machineaddress} "cat >> ~/.ssh/authorized_keys"
    echo "More machine to setup? (y/n)"
    read moremachines
    if [ "$moremachines" = "y" ]; then
        setuppasswordlessssh
    fi
}

setupssh() {
    mkdir -p ~/.ssh
    hostname=$(scutil --get ComputerName)

    echo "Do you want to setup Github key? (y/n)"
    read answer
    if [ "$answer" = "y" ]; then
        ssh-keygen -o -a 100 -t ed25519 -f ~/.ssh/id_ed_github -C "${USER}@${hostname}" -q -N ''
        echo "Github key generated. Press enter to open github"
        read
        pbcopy <~/.ssh/id_ed_github.pub
        open https://github.com/settings/keys
    fi

    echo "Do you want to setup Github Enterprise key? (y/n)"
    read answer
    if [ "$answer" = "y" ]; then
        ssh-keygen -o -a 100 -t ed25519 -f ~/.ssh/id_ed_ghe -C "${USER}@${hostname}" -q -N ''
        echo "Github Enterprise key generated. Press enter to open ghe"
        read
        pbcopy <~/.ssh/id_ed_ghe.pub
        open https://ghe-us.microsoft.com/settings/keys
    fi

    echo "Do you want to setup VSTS key? (y/n)"
    read answer
    if [ "$answer" = "y" ]; then
        ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa_vsts -C "$USER@${hostname}" -q -N ''
        echo "Visual Studio key generated. Press enter to open vsts"
        read
        pbcopy <~/.ssh/id_rsa_vsts.pub
        open https://office.visualstudio.com/_usersSettings/keys
    fi

    echo "Do you want to setup passwordless ssh to a different machine? (y/n)"
    read answer
    if [ "$answer" = "y" ]; then
        setuppasswordlessssh
    fi
}

setupmachinename() {
    echo "Enter your machine name (Ex: mercury, krypton, etc.)"
    read machinename
    sudo scutil --set ComputerName ${machinename}
    sudo scutil --set HostName ${machinename}
    sudo scutil --set LocalHostName ${machinename}
    sudo defaults write /Library/Preferences/SystemConfiguration/com.apple.smb.server NetBIOSName -string ${machinename}
}

initialsetup() {
    echo "Do you want to setup computer name? (y/n)"
    read computername
    if [ "$computername" = "y" ]; then
        setupmachinename
    fi

    set_homebrew_prefix
    evaluate_brew

    echo "Checking brew installation"
    which -s brew
    if [[ $? != 0 ]]; then
        echo "brew not installed. Please install brew and run initalsetup again"
        exit 1
    else
        echo "Homebrew is installed! Continuing..."
    fi

    echo "Installing useful brew packages"
    # coreutils - https://stackoverflow.com/questions/3504945/timeout-command-on-mac-os-x/21118126#21118126
    # act - https://github.com/nektos/act
    brew install wget 
    brew install telnet 
    brew install ruby 
    brew install mvn 
    brew install go 
    brew install coreutils 
    brew install xmlstarlet 
    brew install act 
    brew install tree 
    brew install rustup-init 
    brew install az 
    brew install minikube 
    brew install kubectl 
    brew install kustomize 
    brew install hugo
    brew install node

    brew install --cask iterm2 
    brew install --cask visual-studio-code 
    brew install --cask docker android-studio 
    brew install --cask firefox 
    brew install --cask spectacle 
    brew install --cask microsoft-edge 
    brew install --cask google-chrome 
    brew install --cask powershell
    brew install --cask anaconda

    echo "Initializing rustup"
    rustup-init -y --no-modify-path

    echo "Deactivating anaconda base"
    # $HOMEBREW_PREFIX/anaconda3/bin/conda init $(echo $SHELL | cut -d '/' -f3)
    $HOMEBREW_PREFIX/anaconda3/bin/conda config --set auto_activate_base false

    echo "Do you want to open JDK11 installation page? (y/n)"
    read answer
    if [ "$answer" = "y" ]; then
        open https://www.oracle.com/java/technologies/javase/jdk11-archive-downloads.html
    fi

    echo "Do you want to setup ssh? (y/n)"
    read answer
    if [ "$answer" = "y" ]; then
        setupssh
    fi
}
