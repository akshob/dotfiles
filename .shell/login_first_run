setuppasswordlessssh() {
    hostname=$(scutil --get ComputerName)
    echo "Enter the details to setup passwordless ssh"
    echo "Enter username of your remote machine"
    read username
    echo "Enter remote machine name (not the address). Ex: hydrogen, helium, etc."
    read machinename
    ssh-keygen -o -a 100 -t ed25519 -f ~/.ssh/id_ed_${machinename} -C "${USER}@${hostname}" -q -N ''
    echo "Enter ${machinename}'s address. Ex: mercury.local, krypton.guest.corp.microsoft.com, etc."
    read machineaddress
    cat ~/.ssh/id_ed_${machinename}.pub | ssh ${username}@${machineaddress} "cat >> ~/.ssh/authorized_keys"
    echo "More machine to setup? (y/n)"
    read moremachines
    if [ "$moremachines" = "y" ]; then
        setuppasswordlessssh
    fi
}

setupssh() {
    mkdir -p ~/.ssh
    hostname=$(scutil --get ComputerName)

    echo "Do you want to setup Github key? (y/n)"
    read answer
    if [ "$answer" = "y" ]; then
        ssh-keygen -o -a 100 -t ed25519 -f ~/.ssh/id_ed_github -C "${USER}@${hostname}" -q -N ''
        echo "Github key generated. Press enter to open github"
        read
        pbcopy <~/.ssh/id_ed_github.pub
        open https://github.com/settings/keys
    fi

    echo "Do you want to setup passwordless ssh to a different machine? (y/n)"
    read answer
    if [ "$answer" = "y" ]; then
        setuppasswordlessssh
    fi
}

setupmachinename() {
    echo "Enter your machine name (Ex: mercury, krypton, etc.)"
    read machinename
    sudo scutil --set ComputerName ${machinename}
    sudo scutil --set HostName ${machinename}
    sudo scutil --set LocalHostName ${machinename}
    sudo defaults write /Library/Preferences/SystemConfiguration/com.apple.smb.server NetBIOSName -string ${machinename}
}

setupiterm2() {
    echo "Install oh-my-zsh"
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --keep-zshrc --unattended

    wget "https://raw.githubusercontent.com/Raniconduh/zshfish/master/zshfish.zsh-theme" -P $HOME/.oh-my-zsh/custom/themes

    cp $HOME/.shell/iterm2-prefs.plist $HOME/Library/Preferences/com.googlecode.iterm2.plist
}

installwhisper() {
    pipx install openai-whisper
}

initialsetup() {
    echo "Do you want to setup computer name? (y/n)"
    read computername
    if [ "$computername" = "y" ]; then
        setupmachinename
    fi

    set_homebrew_prefix
    evaluate_brew

    echo "Checking brew installation"
    which -s brew
    if [[ $? != 0 ]]; then
        echo "brew not installed. Please install brew and run initalsetup again"
        exit 1
    else
        echo "Homebrew is installed! Continuing..."
    fi

    echo "Installing useful brew packages"
    # coreutils - https://stackoverflow.com/questions/3504945/timeout-command-on-mac-os-x/21118126#21118126
    # act - https://github.com/nektos/act
    brew tap "homebrew/bundle"
    brew bundle install --file=$HOME/.shell/brew_file

    echo "Setting up iterm2"
    setupiterm2

    echo "Initializing rustup"
    rustup-init -y --no-modify-path

    echo "Fixing conda permissions"
    sudo chown -R $USER $HOME/.conda

    echo "Deactivating anaconda base"
    # $HOMEBREW_PREFIX/anaconda3/bin/conda init $(echo $SHELL | cut -d '/' -f3)
    $HOMEBREW_PREFIX/anaconda3/bin/conda config --set auto_activate_base false

    echo "Do you want to setup ssh? (y/n)"
    read answer
    if [ "$answer" = "y" ]; then
        setupssh
    fi
}
